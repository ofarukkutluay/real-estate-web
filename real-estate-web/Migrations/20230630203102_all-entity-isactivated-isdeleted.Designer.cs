// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using real_estate_web.Data.EntityFramework;

#nullable disable

namespace real_estate_web.Migrations
{
    [DbContext(typeof(RealEstateDbContext))]
    [Migration("20230630203102_all-entity-isactivated-isdeleted")]
    partial class allentityisactivatedisdeleted
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("real_estate_web.Models.Database.About", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BodyContentA")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BodyContentB")
                        .HasColumnType("text");

                    b.Property<string>("BodyTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("About");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BodyContentA = "Mauris blandit aliquet elit, eget tincidunt nibh pulvinar a.\n         Vivamus magna justo, lacinia eget consectetur sed, convallis at tellus. Praesent sapien massa, convallis a pellentesque nec,\n          egestas non nisi. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Donec velit neque, \n          auctor sit amet aliquam vel, ullamcorper sit amet ligula.",
                            BodyContentB = "Sed porttitor lectus nibh. Vivamus magna justo, lacinia eget consectetur sed, \n        convallis at tellus. Mauris blandit aliquet elit, eget tincidunt nibh pulvinar a. \n        Vivamus magna justo, lacinia eget consectetur sed, convallis at tellus.",
                            BodyTitle = "Neden biz?",
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(470),
                            IsActive = true,
                            IsDeleted = false,
                            Title = "Birlikte mutlu anılar biriktirebileceğiniz mülkler buluyoruz"
                        });
                });

            modelBuilder.Entity("real_estate_web.Models.Database.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FacebookLink")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InstagramLink")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFavoritUser")
                        .HasColumnType("boolean");

                    b.Property<int?>("JobTitle")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LinkedinLink")
                        .HasColumnType("text");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PassHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PassSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePhotoPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefresTokenExpireDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TwitterLink")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("YoutubeLink")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobTitle");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("real_estate_web.Models.Database.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BasePhotoPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("real_estate_web.Models.Database.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Key")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("real_estate_web.Models.Database.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("text");

                    b.Property<string>("GoogleIFrameUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HeaderDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InstagramUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LinkedInUrl")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TwitterUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Contact");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Üsküdar/İstanbul",
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(480),
                            Email = "contact@example.com",
                            GoogleIFrameUrl = "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3009.665346984029!2d29.08746581564773!3d41.03257692587779!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14cac8566285c3d7%3A0x60da11ebc95f76ce!2sTantavi%2C%20Estergon%20Cd.%20No%3A43%2C%2034764%20%C3%9Cmraniye%2F%C4%B0stanbul!5e0!3m2!1str!2str!4v1649872532554!5m2!1str!2str",
                            HeaderDescription = "Aut voluptas consequatur unde sed omnis ex placeat quis eos. Aut natus officia corrupti qui autem fugit consectetur quo. Et ipsum eveniet laboriosam voluptas beatae possimus qui ducimus. Et voluptatem deleniti. Voluptatum voluptatibus amet. Et esse sed omnis inventore hic culpa.",
                            IsActive = true,
                            IsDeleted = false,
                            PhoneNumber = "+54 356 945234"
                        });
                });

            modelBuilder.Entity("real_estate_web.Models.Database.DeedStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("DeedStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(360),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Kat Mülkiyetli"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(360),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Kat İrtifaklı"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(360),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Arsa"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(360),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Tarla"
                        });
                });

            modelBuilder.Entity("real_estate_web.Models.Database.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IlKey")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Key")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("real_estate_web.Models.Database.Front", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Fronts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(290),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Kuzey"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(290),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Kuzey Doğu"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(290),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Doğu"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(290),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Güney Doğu"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(300),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Güney"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(300),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Güney Batı"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(300),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Batı"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(300),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Kuzey Batı"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(300),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Bilinmiyor"
                        });
                });

            modelBuilder.Entity("real_estate_web.Models.Database.HeatingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("HeatingTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(370),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Doğalgaz Sobalı"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(380),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Sobalı"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(380),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Yerden Isıtma"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(380),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Kombili"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(380),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Merkezi Sistem"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(380),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "FuelOil"
                        });
                });

            modelBuilder.Entity("real_estate_web.Models.Database.InternetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("InternetTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(390),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "ADSL/VDSL"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(390),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Fiber"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(390),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Bilinmiyor"
                        });
                });

            modelBuilder.Entity("real_estate_web.Models.Database.JobTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("JobTitles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(400),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Broker"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(400),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Danışman"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(400),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Müdür"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(400),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Asistan"
                        });
                });

            modelBuilder.Entity("real_estate_web.Models.Database.Neighborhood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IlceKey")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Key")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Neighborhoods");
                });

            modelBuilder.Entity("real_estate_web.Models.Database.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("integer");

                    b.Property<double?>("Aidat")
                        .HasColumnType("double precision");

                    b.Property<bool?>("AkilliEvMi")
                        .HasColumnType("boolean");

                    b.Property<int?>("BalkonSayisi")
                        .HasColumnType("integer");

                    b.Property<int?>("BanyoSayisi")
                        .HasColumnType("integer");

                    b.Property<string>("BinaYasi")
                        .HasColumnType("text");

                    b.Property<int>("BrutMetre")
                        .HasColumnType("integer");

                    b.Property<string>("BulunduguKat")
                        .HasColumnType("text");

                    b.Property<string>("Cephe")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EsyaliMi")
                        .HasColumnType("boolean");

                    b.Property<int>("IlId")
                        .HasColumnType("integer");

                    b.Property<int>("IlceId")
                        .HasColumnType("integer");

                    b.Property<string>("InternetTipi")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("IsitmaTipi")
                        .HasColumnType("text");

                    b.Property<bool>("KirediyeUygunMu")
                        .HasColumnType("boolean");

                    b.Property<string>("KonumIFrame")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KullanimDurumu")
                        .HasColumnType("text");

                    b.Property<string>("LocationLat")
                        .HasColumnType("text");

                    b.Property<string>("LocationLon")
                        .HasColumnType("text");

                    b.Property<int>("MahalleId")
                        .HasColumnType("integer");

                    b.Property<string>("Manzara")
                        .HasColumnType("text");

                    b.Property<int>("NetMetre")
                        .HasColumnType("integer");

                    b.Property<int>("OdaSayisi")
                        .HasColumnType("integer");

                    b.Property<int?>("OtoparkSayisi")
                        .HasColumnType("integer");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("PropertyListiningId")
                        .HasColumnType("text");

                    b.Property<string>("PropertyType")
                        .HasColumnType("text");

                    b.Property<int>("SalonSayisi")
                        .HasColumnType("integer");

                    b.Property<string>("SiteAdi")
                        .HasColumnType("text");

                    b.Property<bool>("SiteIcerisindeMi")
                        .HasColumnType("boolean");

                    b.Property<int?>("SokakId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("TapuDurumu")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ToplamKat")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("YoutubeLink")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("IlId");

                    b.HasIndex("IlceId");

                    b.HasIndex("MahalleId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("real_estate_web.Models.Database.PropertyListingDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("AlcoholLicense")
                        .HasColumnType("boolean");

                    b.Property<short>("BathroomCount")
                        .HasColumnType("smallint");

                    b.Property<string>("BlockNo")
                        .HasColumnType("text");

                    b.Property<string>("BuildingAge")
                        .HasColumnType("text");

                    b.Property<string>("BuildingTotalFloor")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("DeedStatus")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionHtml")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ElevatorCount")
                        .HasColumnType("text");

                    b.Property<double>("Fees")
                        .HasColumnType("double precision");

                    b.Property<string>("Floor")
                        .HasColumnType("text");

                    b.Property<string>("FloorAreaRatio")
                        .HasColumnType("text");

                    b.Property<string>("FromProfile")
                        .HasColumnType("text");

                    b.Property<string>("Gabari")
                        .HasColumnType("text");

                    b.Property<int>("GrossSquareMeter")
                        .HasColumnType("integer");

                    b.Property<string>("HeatingType")
                        .HasColumnType("text");

                    b.Property<int>("IndoorAreaSquareMeter")
                        .HasColumnType("integer");

                    b.Property<string>("InletHeight")
                        .HasColumnType("text");

                    b.Property<bool>("IsAvailableLoan")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBarter")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFurnished")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOnSite")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThereBalcony")
                        .HasColumnType("boolean");

                    b.Property<string>("LayoutNo")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ListingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ListingPhoneNumbers")
                        .HasColumnType("text");

                    b.Property<string>("ListingStoreName")
                        .HasColumnType("text");

                    b.Property<string>("ListingUserName")
                        .HasColumnType("text");

                    b.Property<string>("Listinglink")
                        .HasColumnType("text");

                    b.Property<short>("LivingRoomCount")
                        .HasColumnType("smallint");

                    b.Property<string>("LocationLat")
                        .HasColumnType("text");

                    b.Property<string>("LocationLon")
                        .HasColumnType("text");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OutdoorAreaSquareMeter")
                        .HasColumnType("integer");

                    b.Property<string>("PhotoLinks")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhotoPaths")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlotNo")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<double>("PricePerSquareMeter")
                        .HasColumnType("double precision");

                    b.Property<string>("ReconstructionStatus")
                        .HasColumnType("text");

                    b.Property<double>("RoomCount")
                        .HasColumnType("double precision");

                    b.Property<string>("SiteName")
                        .HasColumnType("text");

                    b.Property<bool>("SoilSurvey")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("StructureType")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UsableSquareMeter")
                        .HasColumnType("integer");

                    b.Property<string>("UsingStatus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PropertyListingDetails");
                });

            modelBuilder.Entity("real_estate_web.Models.Database.PropertyPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("BasePhoto")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PropertyId")
                        .HasColumnType("integer");

                    b.Property<string>("PropertyListingDetailId")
                        .HasColumnType("text");

                    b.Property<int?>("SortIndex")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyPhotos");
                });

            modelBuilder.Entity("real_estate_web.Models.Database.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("PropertyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(410),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Daire"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(410),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Rezidence"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(410),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Müstakil Ev"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(410),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Villa"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(410),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Çiftlik Evi"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(410),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Yazlık"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(410),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Büro/Ofis"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(410),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Depo/Antrepo"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(420),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Dükkan/Mağaza"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(420),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Plaza"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(420),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Palaza Katı"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(420),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Sağlık Merkezi"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(420),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Spor Tesisi"
                        });
                });

            modelBuilder.Entity("real_estate_web.Models.Database.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(430),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Satılık"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(430),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Kiralık"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(430),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Devren Satılık"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(450),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Devren Kiralık"
                        });
                });

            modelBuilder.Entity("real_estate_web.Models.Database.Street", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MahalleKey")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("real_estate_web.Models.Database.UsingStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("UseCases");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(460),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Boş"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(460),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Mülk Sahibi"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 6, 30, 20, 31, 2, 621, DateTimeKind.Utc).AddTicks(460),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Kiracılı"
                        });
                });

            modelBuilder.Entity("real_estate_web.Models.Database.Agent", b =>
                {
                    b.HasOne("real_estate_web.Models.Database.JobTitle", null)
                        .WithMany()
                        .HasForeignKey("JobTitle");
                });

            modelBuilder.Entity("real_estate_web.Models.Database.Property", b =>
                {
                    b.HasOne("real_estate_web.Models.Database.Agent", null)
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("real_estate_web.Models.Database.City", null)
                        .WithMany()
                        .HasForeignKey("IlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("real_estate_web.Models.Database.District", null)
                        .WithMany()
                        .HasForeignKey("IlceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("real_estate_web.Models.Database.Neighborhood", null)
                        .WithMany()
                        .HasForeignKey("MahalleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("real_estate_web.Models.Database.PropertyPhoto", b =>
                {
                    b.HasOne("real_estate_web.Models.Database.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
